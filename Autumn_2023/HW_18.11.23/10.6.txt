Без исключений:
1. e.Title() == “CEO”
2. e.Title() != “CEO”, а e.Salary() > 100000
3. e.Title() != “CEO” и  e.Salary() <= 100000

С исключениями:
Для строки if(…) имеем:
4. Employee передается по значению, что вызывает конструктор копирования, что можешь сгенерировать исключение
5. Title() может сгенерировать исключение
6. Для работы оператора == нужно преобразовать строку во временный объект, при конструировании которого может возникнуть исключение
7. Если оператор == пользовательский, то он может генерировать исключения
8. аналогично как и в п.5 но для функции Salary()
9. аналогично п.6 может потребоваться создание временного объекта
10. аналогично п.7 но для оператора >
11. аналогично п.7 но для оператора ||

Для строки cout … имеем:
12-16. первый, второй, третий, четвертый, пятый операторы << могут генерировать исключения
17 -18. Аналогично п.5 но для функций First() и Last()

Для строки return … имеем:
19 -20. Аналогично п.5 но для функций First() и Last()
21. аналогично п.6 может потребоваться создание временного объекта  “ “, конструктор которого может генерировать исключения
22-23. аналогично п.7 для оператора +

